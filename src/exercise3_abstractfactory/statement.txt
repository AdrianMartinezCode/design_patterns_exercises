You are developing a cross-platform UI library that allows developers to create user
interfaces for different operating systems (Windows, macOS, and Linux). The library needs to
support creating buttons, checkboxes, and text fields that are visually consistent within each
operating system.

Design an Abstract Factory pattern that allows the application to create UI elements specific to each operating
system without modifying the existing code when adding support for a new operating system. Your solution
should include an abstract factory class or interface, concrete factory classes for each operating system,
and appropriate UI element classes. Write the code in your preferred programming language.

public class AbstractFactoryDemo {

    public static void main(String[] args) {
        Application windowsApp = new Application(new WindowsFactory());
        Application linuxApp = new Application(new LinuxFactory());

        windowsApp.initialize();
        linuxApp.initialize();
    }
}
import java.util.ArrayList;
import java.util.List;

public class Application {

    private List<Button> buttons;
    private List<Checkbox> checkboxes;
    private List<TextField> textFields;

    private UIFactory uiFactory;


    public Application(UIFactory uiFactory) {
        this.uiFactory = uiFactory;
        buttons = new ArrayList<>();
        checkboxes = new ArrayList<>();
        textFields = new ArrayList<>();
    }

    public void initialize() {
        buttons.add(uiFactory.createButton());
        buttons.add(uiFactory.createButton());

        checkboxes.add(uiFactory.createCheckBox());

        textFields.add(uiFactory.createTextField());
    }
}
public interface Button {
    void click();
}
public interface Checkbox {
    void toggle();
}
public interface TextField {
    void setInput(String input);
}
public interface UIFactory {

    TextField createTextField();
    Button createButton();
    Checkbox createCheckBox();

}
public class LinuxButton implements Button {
    @Override
    public void click() {

    }

}
public class LinuxCheckbox implements Checkbox {
    @Override
    public void toggle() {

    }
}
public class LinuxFactory implements UIFactory {
    @Override
    public TextField createTextField() {
        return new LinuxTextField();
    }

    @Override
    public Button createButton() {
        return new LinuxButton();
    }

    @Override
    public Checkbox createCheckBox() {
        return new LinuxCheckbox();
    }
}
public class LinuxTextField implements TextField {

    private String input;

    @Override
    public void setInput(String input) {
        this.input = input;
    }
}
public class WindowsButton implements Button {
    @Override
    public void click() {

    }
}
public class WindowsCheckbox implements Checkbox {
    @Override
    public void toggle() {

    }
}
public class WindowsFactory implements UIFactory {
    @Override
    public TextField createTextField() {
        return new WindowsTextField();
    }

    @Override
    public Button createButton() {
        return new WindowsButton();
    }

    @Override
    public Checkbox createCheckBox() {
        return new WindowsCheckbox();
    }
}
public class WindowsTextField implements TextField {

    private String input;

    @Override
    public void setInput(String input) {
        this.input = input;
    }
}
